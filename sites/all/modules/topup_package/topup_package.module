<?php
/**
 * Implement hook_view_api()
 */
function topup_package_views_api(){
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'topup_package') . '/includes/views',
        //'template path' => drupal_get_path('module', 'topup_package') . '/templates',
    );
}
/**
 * Implements hook_menu().
 */
function topup_package_menu()
{
    $items = array();
    $items['topup_package'] = array(
        'title' => 'Topup Package',
        'description' => 'topup package object',
        'page callback' => 'topup_package_main_page',
        'access callback' => TRUE,
    );
    $items['topup_package/add'] = array(
        'title' => 'Add new topup package',
        'description' => 'Too add a topup package object',
        'page callback' => 'topup_package_add_object',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
    );
    $items['topup_package/%topup_package'] = array(
        'title callback' => 'Entity package view',
        'title arguments' => array(1),
        'page callback' => 'topup_package_view',
        'page arguments' => array(1),
        'access callback' => TRUE,
    );
    $items['topup_package/%topup_package/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );
    $items['topup_package/%topup_package/edit'] = array(
        'title' => 'Edit',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('topup_package_form', 1),
        'access callback' => TRUE,
        'type' => MENU_LOCAL_TASK,
    );
    return $items;
}
function topup_package_view($entity, $view_mode = 'full') {
    $entity_type = 'topup_package';

    //Start setting up the content.
    $entity->content = array(
        '#view_mode' => $view_mode,
    );

    field_attach_prepare_view($entity_type, array($entity->id => $entity),
        $view_mode);
    //We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
    //for us.
    entity_prepare_view($entity_type, array($entity->id => $entity));
    //Now field_attach_view() generates the content for the fields.
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);

    //OK, Field API done, now we can set up some of our own data.
    $entity->content['code'] = array(
        '#type' => 'item',
        '#title' => t('Package code'),
        '#markup' => $entity->code,
    );
    $entity->content['name'] = array(
        '#type' => 'item',
        '#title' => t('Package name'),
        '#markup' => $entity->name,
    );
    $entity->content['amount'] = array(
        '#type' => 'item',
        '#title' => t('Package amount'),
        '#markup' => $entity->amount,
    );
    $entity->content['month'] = array(
        '#type' => 'item',
        '#title' => t('Package month'),
        '#markup' => $entity->month,
    );
    $entity->content['telco'] = array(
        '#type' => 'item',
        '#title' => t('Package telco'),
        '#markup' => $entity->telco,
    );
    $entity->content['status'] = array(
        '#type' => 'item',
        '#title' => t('Package status'),
        '#markup' => $entity->status,
    );
    $entity->content['sms_code'] = array(
        '#type' => 'item',
        '#title' => t('Package sms_code'),
        '#markup' => $entity->sms_code,
    );
    $entity->content['created_at'] = array(
        '#type' => 'item',
        '#title' => t('Created'),
        '#markup' => $entity->created_at,
    );

//    $entity->content['uid'] = array(
//        '#type' => 'item',
//        '#title' => t('Creator'),
//        '#markup' => $wrapper->uid->name->value(),
//    );


    // Now to invoke some hooks. We need the language code for
    // hook_entity_view(), so let's get that.
    global $language;
    $langcode = $language->language;
    // And now invoke hook_entity_view().
    module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
        $langcode);
    // Now invoke hook_entity_view_alter().
    drupal_alter(array('topu_package', 'entity_view'),
        $entity->content, $entity_type);

    // And finally return the content.
    return $entity->content;
}

function topup_package_main_page() {
    $content = array();
    // Load all of our entities.
    $entities = topup_package_load_multiple();
    if (!empty($entities)) {
        foreach ($entities as $entity) {
            // Create tabular rows for our entities.
            $rows[] = array(
                'data' => array(
                    'id' => $entity->id,
                    'name' => l($entity->name, 'topup_package/' . $entity->id),
                    'code' => $entity->code,
                    'amount' => $entity->amount,
                    'month' => $entity->month,
                    'telco' => $entity->telco,
                    'status' => $entity->status,
                    'created_at' => $entity->created_at,
                    'edit' => l('Edit','topup_package/' . $entity->id . '/edit')
                ),
            );
        }
        // Put our entities into a themed table. See theme_table() for details.
        $content['entity_table'] = array(
            '#theme' => 'table',
            '#rows' => $rows,
            '#header' => array(t('ID'), t('Package Name'), t('Package Code'), t('Package Amont'), t('Package Mount'), t('Package telco'), t('Status'), t('Created'), t('Options')),
        );
    }
    else {
        // There were no entities. Tell the user.
        $content[] = array(
            '#type' => 'item',
            '#markup' => t('No employee entities currently exist.'),
        );
    }
    return $content;
}
function topup_package_add_object() {
//  $entity = entity_create(array());
    $entity = entity_create('topup_package', array());
    return drupal_get_form('topup_package_form', $entity);
    //return drupal_get_form('topup_package_form');
}

function topup_package_form($form, $form_state, $entity = NULL) {

    $form['field_code'] = array(
        '#type' => 'fieldset',
        '#title' => t('Package Information'),
        '#prefix' => '<div id="field-code-wrapper">',
        '#suffix' => '</div>',
    );
    if (!empty($form_state['values']['amount']) && !empty($form_state['values']['month']) && empty($entity->code)) {
        $result = sprintf('%03d', $form_state['values']['amount']) . sprintf('%02d', $form_state['values']['month']);
    } else if (!empty($entity->code)){
        $result = $entity->code;
    } else {
        $result = '';
    }

    //unset($form_state['input']['code']);

    $form['field_code']['code'] = array(
        '#type' => 'textfield',
        '#title' => 'Code',
        '#size' => 10,
        '#maxlength' => 10,
        '#disabled' => TRUE,
//    '#required' => TRUE,
    );
    if (!empty($result)) {
        $form['field_code']['code']['#value'] = $result;
    }

    if (!empty($form_state['values']['amount']) && !empty($form_state['values']['month']) && !empty($form_state['values']['telco']) && empty($entity->sms_code)) {
        $smscode_value = sprintf('%03d', $form_state['values']['amount']) . sprintf('%02d', $form_state['values']['month']);
    } else if (!empty($entity->sms_code)) {
        $smscode_value = $entity->sms_code;
    } else {
        $smscode_value = '';
    }

    $form['field_code']['sms_code'] = array(
        '#type' => 'textfield',
        '#title' => 'Sms Code',
        '#size' => 30,
        '#maxlength' => 30,
        '#disabled' => TRUE,
        '#value' => $smscode_value,
    );

    $form['field_code']['name'] = array(
        '#type' => 'textfield',
        '#title' => 'Name',
        '#description' => 'Enter package name',
        '#size' => 60,
        '#maxlength' => 255,
        '#required' => TRUE,
        '#default_value' => isset($entity->name) ? $entity->name : '',
    );

    $form['field_code']['amount'] = array(
        '#type' => 'select',
        '#title' => 'Amount',
        '#description' => 'Select package amount',
        '#required' => TRUE,
        '#options' => drupal_map_assoc(array('10' => '010', '20' => '020', '30' => '030', '50' => '050', '100' => '100',
            '200' => '200', '500' => '500')),
        '#default_value' => isset($entity->amount) ? substr($entity->amount, 0, -3) : '10',
        '#ajax' => array(
            'wrapper' => 'field-code-wrapper',
            'callback' => 'ajax_auto_generate_options',
            'event' => 'change',
        ),
    );
    $values = array();
    for ($i = 1 ; $i <= 12; $i++) {
        $values[$i] = $i;
    }
    $form['field_code']['month'] = array(
        '#type' => 'select',
        '#title' => 'Month',
        '#description' => 'Select package month',
        '#required' => TRUE,
        '#options' => drupal_map_assoc($values),
        '#default_value' => isset($entity->month) ? $entity->month : '1',
        '#ajax' => array(
            'wrapper' => 'field-code-wrapper',
            'callback' => 'ajax_auto_generate_options',
            'event' => 'change',
        ),
    );
    if (!empty($entity->id)) {
        $form['field_code']['sms_code']['#disabled'] = TRUE;
        $form['field_code']['amount']['#disabled'] = TRUE;
        $form['field_code']['month']['#disabled'] = TRUE;
    }
    if (isset($entity->telco)) {
        switch ($entity->telco) {
            case 'VTEL' :
                $telco_value = 'Viettel';
                break;
            case 'VINA' :
                $telco_value = 'Vinaphone';
                break;
            case 'MOBI' :
                $telco_value = 'Mobifone';
                break;
        }
    }
    $form['field_code']['telco'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Telco',
        '#required' => TRUE,
        '#options' => drupal_map_assoc(array(
            'MOBI' => 'Mobifone',
            'VTEL' => 'Viettel',
            'VINA' => 'Vinaphone'
        )),
        '#default_value' => isset($telco_value) ? array($telco_value) : array(),
    );

    $form['field_code']['status'] = array(
        '#type' => 'radios',
        '#title' => 'Package Status',
        '#options' => array(
            'enabled' => 'Enable',
            'disabled' => 'Disable',
        ),
        '#default_value' => !empty($entity->status) ? $entity->status : 'enabled',
    );

    $form['basic_entity'] = array(
        '#type' => 'value',
        '#value' => $entity,
    );

    $form['field_code']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Create',
    );

    return $form;
}

function topup_package_form_submit($form, &$form_state) {
    $entity = $form_state['values']['basic_entity'];
    $entity->code = $form_state['values']['code'];
    $entity->name = $form_state['values']['name'];
    $entity->amount = (int) $form_state['values']['amount'];
    $entity->month = $form_state['values']['month'];
    $entity->telco = $form_state['values']['telco'];
    $entity->status = $form_state['values']['status'];
    $entity->sms_code = $form_state['values']['sms_code'];
    $entity->created_at = time();
    $result = entity_save('topup_package', $entity);
    if ($result == 'SUCCESS') {
        drupal_set_message($result);
    } else {
        drupal_set_message($result);
    }
}
function ajax_auto_generate_options($form, $form_state) {
//  return form_builder($form['topup_package_form'], $lines, $form_state);
//  $form_state['rebuild'] = TRUE;
    return $form['field_code'];
}
/**
 * Implements hook_entity_info().
 */
function topup_package_entity_info()
{
    $info['topup_package'] = array(
        'label' => t('Topup Package Entity'),
        'controller class' => 'TopupPackageController',
        'label callback' => 'topup_package_generate_label',
        'fieldable' => FALSE,
//    'access callback' => 'subscription_rest_pakage_access_callback',
        'uri callback' => 'topup_package_uri_callback',
        'entity keys' => array(
            'id' => 'id',
            'label' => 'name',
        ),
        'bundles' => array(),
        'view modes' => array(
            'full' => array(
                'label' => t('Full'),
                'custom settings' => TRUE,
            ),
        ) ,
    );

    return $info;
}

function topup_package_generate_label($entity, $entity_type) {
    return isset($entity) ? $entity->name : 'Topup Package Object';
}

function topup_package_uri_callback($entity) {
    return array(
        'path' => 'topup_package/object/' . $entity->id,
    );
}
function topup_package_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
    return entity_load('topup_package', $ids, $conditions, $reset);
}

function topup_package_load($id = NULL, $reset = FALSE) {
    $id = (isset($id) ? array($id) : array());
    $topup = entity_load('topup_package', $id, array(), $reset);
    return $topup ? reset($topup) : FALSE;
}
interface TopupPackageInterface extends EntityAPIControllerInterface {
    public function topup_package_generate_data($entity);
//  public function save($entity);
//  public function create(array $values = array());
}

class TopupPackageController extends EntityAPIController implements TopupPackageInterface{

    public function create(array $values = array())
    {
        $values = array_merge($values, array(
            'id' => 0,
            'code' => '',
            'name' => '',
            'amount' => '',
            'month' => '',
//      'telco' => '',
            'status' => '',
            'sms_code' => '',
//      'created_at' => REQUEST_TIME,
//      'updated_at' => REQUEST_TIME,
        ));
        return parent::create($values);
    }

    public function topup_package_generate_data($entity) {
        $result = array();

        if (!is_array($entity->telco)) {
            $entity->telco = array($entity->telco);
        }
        foreach ($entity->telco as $key => $item) {
            if ($item != '0') {
                $row = array();
                if (!empty($entity->id)) {
                    $row['id'] = $entity->id;
                }
                switch ($item) {
                    case 'Viettel' :
                        $row['telco'] = 'VTEL';
                        break;
                    case 'Mobifone' :
                        $row['telco'] = 'MOBI';
                        break;
                    case 'Vinaphone' :
                        $row['telco'] = 'VINA';
                        break;
                    default:
                        $row['telco'] = $item;
                        break;
                }

                if (!empty($entity->id)) {
                    $row['name'] = $entity->name;
                    $row['code'] = $entity->code;
                    $row['amount'] = $entity->amount;
                    $row['status'] = $entity->status;
                    $row['sms_code'] = $entity->sms_code;
                } else {
                    $row['name'] = $entity->name . ' ' . $item;
                    $row['code'] = $row['telco'] . $entity->code;
                    $row['amount'] = $entity->amount . '000';
                    $row['status'] = $entity->status;
                    $row['sms_code'] = $row['telco'] . ' ' . $entity->sms_code;
                }

                $row['month'] = $entity->month;
                $result[] = $row;
            }
        }

        return $result;
    }

    public function save($entity, DatabaseTransaction $transaction = NULL) {
        $url = 'http://localhost:8181/subscription-rest/package/save';
        $data = entity_get_controller('topup_package')->topup_package_generate_data($entity);
        $headers = array();
        $respone_code = '';
        foreach($data as $data_item) {
            $options = array(
                'method' => 'POST',
                'data' => (!empty($data_item)) ? json_encode($data_item) : '{}',
                'headers' => $headers,
            );
            $respone = drupal_http_request($url, $options);
            if ($respone->code == 200) {
                if (empty($entity->id)) {
                    $respone_code .= 'Create package name : ' . $data_item['name'] . ' done </br>';
                } else {
                    $respone_code .= 'Save package name : ' . $data_item['name'] . ' done </br>';
                }
            } else {
                $respone_code .= 'Create package name : ' . $data_item['name'] . ' failed "DUPLICATED_AUTO_TOPUP_PACKAGE"</br>';
            }
        }
        return $respone_code;
    }
    public function load($ids = array(), $conditions = array()) {
        $entities = array();
        $url = 'http://localhost:8181/subscription-rest/package/search';
        $headers = array();
        if ($ids != FALSE && !$conditions) {
            $queried_entities = array();
            if (empty($ids)) {
                $options = array(
                    'method' => 'POST',
                    'data' => '{}',
                    'headers' => $headers,
                );
                $respone = drupal_http_request($url, $options);
                if ($respone->code == 200) {
                    $result = json_decode($respone->data);
                }
                foreach ($result->list as $row) {
                    $queried_entities[$row->id] = $row;
                }
            }else {
                foreach($ids as $id) {
                    $filter = array('id' => $id, );
                    $options = array(
                        'method' => 'POST',
                        'data' => !empty($filter) ? json_encode($filter) : '{}',
                        'headers' => $headers,
                    );
                    $respone = drupal_http_request($url, $options);
                    if ($respone->code == 200) {
                        $result = json_decode($respone->data);
                        foreach ($result->list as $row) {
                            $queried_entities[$row->id] = $row;
                        }
                    }
                }
            }
        } else {
            $options = array(
                'method' => 'POST',
                'data' => '{}',
                'headers' => $headers,
            );
            $respone = drupal_http_request($url, $options);
            if ($respone->code == 200) {
                $result = json_decode($respone->data);
            }
        }
        foreach ($result->list as $row) {
            $queried_entities[$row->id] = $row;
        }
        if (!empty($queried_entities)) {
            $entities = array();
            $entities += $queried_entities;
        }

        return $entities;
    }
}